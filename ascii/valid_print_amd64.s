// Code generated by command: go run valid_print_asm.go -pkg ascii -out ../ascii/valid_print_amd64.s -stubs ../ascii/valid_print_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func ValidPrintString(s string) bool
TEXT Â·ValidPrintString(SB), NOSPLIT, $0-17
	MOVQ s_base+0(FP), AX
	MOVQ s_len+8(FP), CX
	MOVQ $0xdfdfdfdfdfdfdfe0, DX
	MOVQ $0x0101010101010101, BX
	MOVQ $0x8080808080808080, SI

cmp8:
	CMPQ  CX, $0x08
	JB    cmp4
	MOVQ  (AX), DI
	MOVQ  DI, R8
	LEAQ  (DI)(DX*1), R9
	NOTQ  R8
	ANDQ  R8, R9
	LEAQ  (DI)(BX*1), R8
	ORQ   R8, DI
	ORQ   R9, DI
	ADDQ  $0x08, AX
	SUBQ  $0x08, CX
	TESTQ SI, DI
	JNE   done
	JMP   cmp8

cmp4:
	CMPQ  CX, $0x04
	JB    cmp3
	MOVL  (AX), DX
	MOVL  DX, BX
	LEAL  3755991008(DX), SI
	NOTL  BX
	ANDL  BX, SI
	LEAL  16843009(DX), BX
	ORL   BX, DX
	ORL   SI, DX
	ADDQ  $0x04, AX
	SUBQ  $0x04, CX
	TESTL $0x80808080, DX
	JNE   done

cmp3:
	CMPQ    CX, $0x03
	JB      cmp2
	MOVWLZX (AX), CX
	MOVBLZX 2(AX), AX
	SHLL    $0x10, AX
	ORL     CX, AX
	ORL     $0x20000000, AX
	JMP     final

cmp2:
	CMPQ    CX, $0x02
	JB      cmp1
	MOVWLZX (AX), AX
	ORL     $0x20200000, AX
	JMP     final

cmp1:
	CMPQ    CX, $0x00
	JE      done
	MOVBLZX (AX), AX
	ORL     $0x20202000, AX

final:
	MOVL  AX, CX
	LEAL  3755991008(AX), DX
	NOTL  CX
	ANDL  CX, DX
	LEAL  16843009(AX), CX
	ORL   CX, AX
	ORL   DX, AX
	TESTL $0x80808080, AX

done:
	SETEQ ret+16(FP)
	RET
