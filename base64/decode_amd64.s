// Code generated by command: go run decode_asm.go -pkg base64 -out ../base64/decode_amd64.s -stubs ../base64/decode_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func decodeAVX2(dst []byte, src []byte, lut [16]int8) (int, int)
// Requires: AVX, AVX2, SSE4.1
TEXT Â·decodeAVX2(SB), NOSPLIT, $0-80
	MOVQ         dst_base+0(FP), AX
	MOVQ         src_base+24(FP), DX
	MOVQ         src_len+32(FP), SI
	MOVB         $0x2f, CL
	PINSRB       $0x00, CX, X8
	VPBROADCASTB X8, Y8
	XORQ         CX, CX
	XORQ         BX, BX
	VPXOR        Y7, Y7, Y7

	// Load the 16-byte LUT into both lanes of the register
	VPERMQ  $0x44, lut_0+48(FP), Y6
	VMOVDQA b64_dec_lut_lo<>+0(SB), Y4
	VMOVDQA b64_dec_lut_hi<>+0(SB), Y5

loop:
	VMOVDQU      (DX)(BX*1), Y0
	VPSRLD       $0x04, Y0, Y2
	VPAND        Y8, Y0, Y3
	VPSHUFB      Y3, Y4, Y3
	VPAND        Y8, Y2, Y2
	VPSHUFB      Y2, Y5, Y9
	VPTEST       Y9, Y3
	JNE          done
	VPCMPEQB     Y8, Y0, Y3
	VPADDB       Y3, Y2, Y2
	VPSHUFB      Y2, Y6, Y2
	VPADDB       Y0, Y2, Y0
	VPMADDUBSW   b64_dec_maddub<>+0(SB), Y0, Y0
	VPMADDWD     b64_dec_madd<>+0(SB), Y0, Y0
	VEXTRACTI128 $0x01, Y0, X1
	VPSHUFB      b64_dec_shuf_lo<>+0(SB), X1, X1
	VPSHUFB      b64_dec_shuf<>+0(SB), Y0, Y0
	VPBLENDD     $0x08, Y1, Y0, Y1
	VPBLENDD     $0xc0, Y7, Y1, Y1
	VMOVDQU      Y1, (AX)(CX*1)
	ADDQ         $0x18, CX
	ADDQ         $0x20, BX
	SUBQ         $0x20, SI
	CMPQ         SI, $0x2d
	JB           done
	JMP          loop

done:
	MOVQ CX, ret+64(FP)
	MOVQ BX, ret1+72(FP)
	RET

DATA b64_dec_lut_lo<>+0(SB)/8, $0x1111111111111115
DATA b64_dec_lut_lo<>+8(SB)/8, $0x1a1b1b1b1a131111
DATA b64_dec_lut_lo<>+16(SB)/8, $0x1111111111111115
DATA b64_dec_lut_lo<>+24(SB)/8, $0x1a1b1b1b1a131111
GLOBL b64_dec_lut_lo<>(SB), RODATA|NOPTR, $32

DATA b64_dec_lut_hi<>+0(SB)/8, $0x0804080402011010
DATA b64_dec_lut_hi<>+8(SB)/8, $0x1010101010101010
DATA b64_dec_lut_hi<>+16(SB)/8, $0x0804080402011010
DATA b64_dec_lut_hi<>+24(SB)/8, $0x1010101010101010
GLOBL b64_dec_lut_hi<>(SB), RODATA|NOPTR, $32

DATA b64_dec_maddub<>+0(SB)/8, $0x0140014001400140
DATA b64_dec_maddub<>+8(SB)/8, $0x0140014001400140
DATA b64_dec_maddub<>+16(SB)/8, $0x0140014001400140
DATA b64_dec_maddub<>+24(SB)/8, $0x0140014001400140
GLOBL b64_dec_maddub<>(SB), RODATA|NOPTR, $32

DATA b64_dec_madd<>+0(SB)/8, $0x0001100000011000
DATA b64_dec_madd<>+8(SB)/8, $0x0001100000011000
DATA b64_dec_madd<>+16(SB)/8, $0x0001100000011000
DATA b64_dec_madd<>+24(SB)/8, $0x0001100000011000
GLOBL b64_dec_madd<>(SB), RODATA|NOPTR, $32

DATA b64_dec_shuf_lo<>+0(SB)/8, $0x0000000000000000
DATA b64_dec_shuf_lo<>+8(SB)/8, $0x0600010200000000
GLOBL b64_dec_shuf_lo<>(SB), RODATA|NOPTR, $16

DATA b64_dec_shuf<>+0(SB)/8, $0x090a040506000102
DATA b64_dec_shuf<>+8(SB)/8, $0x000000000c0d0e08
DATA b64_dec_shuf<>+16(SB)/8, $0x0c0d0e08090a0405
DATA b64_dec_shuf<>+24(SB)/8, $0x0000000000000000
GLOBL b64_dec_shuf<>(SB), RODATA|NOPTR, $32
